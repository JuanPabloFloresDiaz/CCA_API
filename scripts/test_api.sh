#!/bin/bash

# Script para probar los endpoints de Secciones
# Aseg√∫rate de que la aplicaci√≥n est√© corriendo en localhost:8080

BASE_URL="http://localhost:8080/api/secciones"
JSON_CONTENT="Content-Type: application/json"

echo "üß™ Ejecutando tests de integraci√≥n para API de Secciones"
echo "======================================================"

# Variables para capturar IDs
SECCION_ID=""

echo ""
echo "üìù 1. Crear una nueva secci√≥n"
echo "--------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$BASE_URL" \
  -H "$JSON_CONTENT" \
  -d '{
    "nombre": "Gesti√≥n de Usuarios",
    "descripcion": "Secci√≥n para administrar usuarios y permisos del sistema"
  }')

HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 201 ]; then
    echo "‚úÖ √âXITO: Secci√≥n creada (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.'
    SECCION_ID=$(echo "$BODY" | jq -r '.data.id')
    echo "üîë ID de secci√≥n capturado: $SECCION_ID"
else
    echo "‚ùå ERROR: No se pudo crear la secci√≥n (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "üìñ 2. Obtener secci√≥n por ID"
echo "-------------------------------"
if [ ! -z "$SECCION_ID" ]; then
    RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL/$SECCION_ID")
    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
    BODY=$(echo "$RESPONSE" | head -n -1)
    
    if [ "$HTTP_CODE" -eq 200 ]; then
        echo "‚úÖ √âXITO: Secci√≥n obtenida (HTTP $HTTP_CODE)"
        echo "$BODY" | jq '.'
    else
        echo "‚ùå ERROR: No se pudo obtener la secci√≥n (HTTP $HTTP_CODE)"
        echo "$BODY"
    fi
else
    echo "‚ö†Ô∏è  SALTADO: No hay ID de secci√≥n para probar"
fi

echo ""
echo "üìã 3. Obtener todas las secciones"
echo "-----------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL")
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 200 ]; then
    echo "‚úÖ √âXITO: Lista de secciones obtenida (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.data | length' 2>/dev/null | xargs echo "Cantidad de secciones:"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: No se pudo obtener la lista de secciones (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "üìÑ 4. Obtener secciones con paginaci√≥n"
echo "----------------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL/paginado?page=0&size=5")
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 200 ]; then
    echo "‚úÖ √âXITO: Secciones paginadas obtenidas (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.data.totalElements' 2>/dev/null | xargs echo "Total de elementos:"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: No se pudo obtener secciones paginadas (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "üîç 5. Buscar secciones por nombre"
echo "-----------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL/buscar?nombre=Gesti√≥n")
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 200 ]; then
    echo "‚úÖ √âXITO: B√∫squeda completada (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.data | length' 2>/dev/null | xargs echo "Resultados encontrados:"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: Error en la b√∫squeda (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "‚úèÔ∏è  6. Actualizar secci√≥n"
echo "---------------------------"
if [ ! -z "$SECCION_ID" ]; then
    RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "$BASE_URL/$SECCION_ID" \
      -H "$JSON_CONTENT" \
      -d '{
        "nombre": "Gesti√≥n de Usuarios Actualizada",
        "descripcion": "Secci√≥n actualizada para administrar usuarios, roles y permisos del sistema"
      }')
    
    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
    BODY=$(echo "$RESPONSE" | head -n -1)
    
    if [ "$HTTP_CODE" -eq 200 ]; then
        echo "‚úÖ √âXITO: Secci√≥n actualizada (HTTP $HTTP_CODE)"
        echo "$BODY" | jq '.'
    else
        echo "‚ùå ERROR: No se pudo actualizar la secci√≥n (HTTP $HTTP_CODE)"
        echo "$BODY"
    fi
else
    echo "‚ö†Ô∏è  SALTADO: No hay ID de secci√≥n para actualizar"
fi

echo ""
echo "üî¢ 7. Contar secciones activas"
echo "--------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL/contar")
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 200 ]; then
    echo "‚úÖ √âXITO: Conteo obtenido (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: No se pudo obtener el conteo (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "‚ùì 8. Verificar existencia por nombre"
echo "---------------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL/existe/Gesti√≥n%20de%20Usuarios%20Actualizada")
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 200 ]; then
    echo "‚úÖ √âXITO: Verificaci√≥n completada (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: Error en la verificaci√≥n (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "üóëÔ∏è  9. Eliminar secci√≥n (soft delete)"
echo "---------------------------------------"
if [ ! -z "$SECCION_ID" ]; then
    RESPONSE=$(curl -s -w "\n%{http_code}" -X DELETE "$BASE_URL/$SECCION_ID")
    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
    BODY=$(echo "$RESPONSE" | head -n -1)
    
    if [ "$HTTP_CODE" -eq 200 ]; then
        echo "‚úÖ √âXITO: Secci√≥n eliminada (HTTP $HTTP_CODE)"
        echo "$BODY" | jq '.'
    else
        echo "‚ùå ERROR: No se pudo eliminar la secci√≥n (HTTP $HTTP_CODE)"
        echo "$BODY"
    fi
else
    echo "‚ö†Ô∏è  SALTADO: No hay ID de secci√≥n para eliminar"
fi

echo ""
echo "üîç 10. Verificar que la secci√≥n fue eliminada"
echo "----------------------------------------------"
if [ ! -z "$SECCION_ID" ]; then
    RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL/$SECCION_ID")
    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
    BODY=$(echo "$RESPONSE" | head -n -1)
    
    if [ "$HTTP_CODE" -eq 404 ]; then
        echo "‚úÖ √âXITO: Secci√≥n correctamente eliminada (HTTP $HTTP_CODE)"
        echo "$BODY" | jq '.'
    else
        echo "‚ùå ERROR: La secci√≥n deber√≠a estar eliminada (HTTP $HTTP_CODE)"
        echo "$BODY"
    fi
else
    echo "‚ö†Ô∏è  SALTADO: No hay ID de secci√≥n para verificar"
fi

echo ""
echo "üéØ 11. Probar error de validaci√≥n"
echo "-----------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$BASE_URL" \
  -H "$JSON_CONTENT" \
  -d '{
    "nombre": "",
    "descripcion": "Descripci√≥n sin nombre"
  }')

HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 400 ]; then
    echo "‚úÖ √âXITO: Error de validaci√≥n capturado correctamente (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: Deber√≠a haber fallado la validaci√≥n (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "üéâ RESUMEN DE TESTS COMPLETADO"
echo "================================"
echo "‚úÖ Tests ejecutados exitosamente"
echo "üìä Revisa los resultados arriba para verificar el comportamiento"
echo "üåê Swagger UI disponible en: http://localhost:8080/swagger-ui.html"
echo ""
