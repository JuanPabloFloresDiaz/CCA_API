#!/bin/bash

# Script para probar los endpoints de Aplicaciones
# Aseg√∫rate de que la aplicaci√≥n est√© corriendo en localhost:8080

BASE_URL="http://localhost:8080/api/aplicaciones"
JSON_CONTENT="Content-Type: application/json"

echo "üß™ Ejecutando tests de integraci√≥n para API de Aplicaciones"
echo "=========================================================="

# Variables para capturar IDs
APLICACION_ID=""

echo ""
echo "üìù 1. Crear una nueva aplicaci√≥n"
echo "--------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$BASE_URL" \
  -H "$JSON_CONTENT" \
  -d '{
    "nombre": "Sistema de Ventas",
    "descripcion": "Sistema principal para gesti√≥n de ventas y facturaci√≥n",
    "url": "https://ventas.miempresa.com",
    "llaveIdentificadora": "VENTAS_SYS_2024",
    "estado": "ACTIVO"
  }')

HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 201 ]; then
    echo "‚úÖ √âXITO: Aplicaci√≥n creada (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.'
    APLICACION_ID=$(echo "$BODY" | jq -r '.data.id' 2>/dev/null)
    echo "üîë ID de aplicaci√≥n capturado: $APLICACION_ID"
else
    echo "‚ùå ERROR: No se pudo crear la aplicaci√≥n (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "üìñ 2. Obtener aplicaci√≥n por ID"
echo "-------------------------------"
if [ ! -z "$APLICACION_ID" ] && [ "$APLICACION_ID" != "null" ]; then
    RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL/$APLICACION_ID")
    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
    BODY=$(echo "$RESPONSE" | head -n -1)
    
    if [ "$HTTP_CODE" -eq 200 ]; then
        echo "‚úÖ √âXITO: Aplicaci√≥n obtenida (HTTP $HTTP_CODE)"
        echo "$BODY" | jq '.'
    else
        echo "‚ùå ERROR: No se pudo obtener la aplicaci√≥n (HTTP $HTTP_CODE)"
        echo "$BODY"
    fi
else
    echo "‚ö†Ô∏è  SALTADO: No hay ID de aplicaci√≥n para probar"
fi

echo ""
echo "üîë 3. Obtener aplicaci√≥n por llave identificadora"
echo "------------------------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL/llave/VENTAS_SYS_2024")
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 200 ]; then
    echo "‚úÖ √âXITO: Aplicaci√≥n obtenida por llave (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: No se pudo obtener la aplicaci√≥n por llave (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "üìã 4. Obtener todas las aplicaciones"
echo "------------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL")
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 200 ]; then
    echo "‚úÖ √âXITO: Lista de aplicaciones obtenida (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.data | length' 2>/dev/null | xargs echo "Cantidad de aplicaciones:"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: No se pudo obtener la lista de aplicaciones (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "üìÑ 5. Obtener aplicaciones con paginaci√≥n"
echo "-----------------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL/paginado?page=0&size=5")
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 200 ]; then
    echo "‚úÖ √âXITO: Aplicaciones paginadas obtenidas (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.data.totalElements' 2>/dev/null | xargs echo "Total de elementos:"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: No se pudo obtener aplicaciones paginadas (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "üîç 6. Buscar aplicaciones por nombre"
echo "------------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL/buscar?nombre=Sistema")
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 200 ]; then
    echo "‚úÖ √âXITO: B√∫squeda completada (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.data | length' 2>/dev/null | xargs echo "Resultados encontrados:"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: Error en la b√∫squeda (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "‚úèÔ∏è  7. Actualizar aplicaci√≥n"
echo "-----------------------------"
if [ ! -z "$APLICACION_ID" ] && [ "$APLICACION_ID" != "null" ]; then
    RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "$BASE_URL/$APLICACION_ID" \
      -H "$JSON_CONTENT" \
      -d '{
        "nombre": "Sistema de Ventas Actualizado",
        "descripcion": "Sistema principal para gesti√≥n de ventas, facturaci√≥n e inventario",
        "url": "https://ventas-v2.miempresa.com",
        "llaveIdentificadora": "VENTAS_SYS_2024",
        "estado": "ACTIVO"
      }')
    
    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
    BODY=$(echo "$RESPONSE" | head -n -1)
    
    if [ "$HTTP_CODE" -eq 200 ]; then
        echo "‚úÖ √âXITO: Aplicaci√≥n actualizada (HTTP $HTTP_CODE)"
        echo "$BODY" | jq '.'
    else
        echo "‚ùå ERROR: No se pudo actualizar la aplicaci√≥n (HTTP $HTTP_CODE)"
        echo "$BODY"
    fi
else
    echo "‚ö†Ô∏è  SALTADO: No hay ID de aplicaci√≥n para actualizar"
fi

echo ""
echo "üîÑ 8. Cambiar estado de aplicaci√≥n"
echo "----------------------------------"
if [ ! -z "$APLICACION_ID" ] && [ "$APLICACION_ID" != "null" ]; then
    RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH "$BASE_URL/$APLICACION_ID/estado?estado=INACTIVO")
    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
    BODY=$(echo "$RESPONSE" | head -n -1)
    
    if [ "$HTTP_CODE" -eq 200 ]; then
        echo "‚úÖ √âXITO: Estado cambiado (HTTP $HTTP_CODE)"
        echo "$BODY" | jq '.'
    else
        echo "‚ùå ERROR: No se pudo cambiar el estado (HTTP $HTTP_CODE)"
        echo "$BODY"
    fi
else
    echo "‚ö†Ô∏è  SALTADO: No hay ID de aplicaci√≥n para cambiar estado"
fi

echo ""
echo "üî¢ 9. Contar aplicaciones activas"
echo "---------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL/contar")
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 200 ]; then
    echo "‚úÖ √âXITO: Conteo obtenido (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: No se pudo obtener el conteo (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "‚ùì 10. Verificar existencia por llave identificadora"
echo "---------------------------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL/existe/VENTAS_SYS_2024")
HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 200 ]; then
    echo "‚úÖ √âXITO: Verificaci√≥n completada (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: Error en la verificaci√≥n (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "üóëÔ∏è  11. Eliminar aplicaci√≥n (soft delete)"
echo "------------------------------------------"
if [ ! -z "$APLICACION_ID" ] && [ "$APLICACION_ID" != "null" ]; then
    RESPONSE=$(curl -s -w "\n%{http_code}" -X DELETE "$BASE_URL/$APLICACION_ID")
    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
    BODY=$(echo "$RESPONSE" | head -n -1)
    
    if [ "$HTTP_CODE" -eq 200 ]; then
        echo "‚úÖ √âXITO: Aplicaci√≥n eliminada (HTTP $HTTP_CODE)"
        echo "$BODY" | jq '.'
    else
        echo "‚ùå ERROR: No se pudo eliminar la aplicaci√≥n (HTTP $HTTP_CODE)"
        echo "$BODY"
    fi
else
    echo "‚ö†Ô∏è  SALTADO: No hay ID de aplicaci√≥n para eliminar"
fi

echo ""
echo "üîÑ 12. Restaurar aplicaci√≥n"
echo "---------------------------"
if [ ! -z "$APLICACION_ID" ] && [ "$APLICACION_ID" != "null" ]; then
    RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH "$BASE_URL/$APLICACION_ID/restaurar")
    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
    BODY=$(echo "$RESPONSE" | head -n -1)
    
    if [ "$HTTP_CODE" -eq 200 ]; then
        echo "‚úÖ √âXITO: Aplicaci√≥n restaurada (HTTP $HTTP_CODE)"
        echo "$BODY" | jq '.'
    else
        echo "‚ùå ERROR: No se pudo restaurar la aplicaci√≥n (HTTP $HTTP_CODE)"
        echo "$BODY"
    fi
else
    echo "‚ö†Ô∏è  SALTADO: No hay ID de aplicaci√≥n para restaurar"
fi

echo ""
echo "üéØ 13. Probar error de validaci√≥n"
echo "----------------------------------"
RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$BASE_URL" \
  -H "$JSON_CONTENT" \
  -d '{
    "nombre": "",
    "descripcion": "Aplicaci√≥n sin nombre",
    "url": "invalid-url",
    "llaveIdentificadora": "abc"
  }')

HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
BODY=$(echo "$RESPONSE" | head -n -1)

if [ "$HTTP_CODE" -eq 400 ]; then
    echo "‚úÖ √âXITO: Error de validaci√≥n capturado correctamente (HTTP $HTTP_CODE)"
    echo "$BODY" | jq '.'
else
    echo "‚ùå ERROR: Deber√≠a haber fallado la validaci√≥n (HTTP $HTTP_CODE)"
    echo "$BODY"
fi

echo ""
echo "üéâ RESUMEN DE TESTS COMPLETADO"
echo "================================"
echo "‚úÖ Tests de Aplicaciones ejecutados exitosamente"
echo "üìä Revisa los resultados arriba para verificar el comportamiento"
echo "üåê Swagger UI disponible en: http://localhost:8080/swagger-ui.html"
echo ""
